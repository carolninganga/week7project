# Caroline Ninganga
# Project 7 L-Systems 
# Version 1

# An L-system requires two pieces of information:

# the base string, and
# the list of rules
import sys

def init(): #The init function creates an empty L-system and returns it. Using the list representation, an empty L-system is a list with two elements: the empty string and an empty list. 
    lsys = ['',[]]
    return lsys

#The getBase function takes in just one argument--the L-system list. 
#It returns the base string, which is the first item in the L-system list.
def getBase( lsys ):
    return lsys[0]

#The setBase function takes in two arguments, an L-system list and a base string. 
#It assigns to the base string field of the L-system list the new string provided in the base parameter.
def setBase( lsys, base ):
    lsys[0] = base

#The addRule function takes in two arguments: an L-system list and a rule. 
#It should append the rule to the list of rules, which is the second item in the L-system list.
def addRule( lsys, rule ):
    lsys[1].append( rule )

#The getRule functions takes in two argument--the L-system and the index of the rule to retrieve. 
#It returns the rule at position index of the L-systems's list of rules.
def getRule( lsys, index):
    return lsys[1][index]

def createLsystemFromFile( filename ):
    """ Create an L-system list by reading in the specified file """
    # assign to lsys the result of calling the function init()
    lsys = init()
    # assign to fp the result of opening the file (use open(filename, "r") )
    fp = open(filename, "r")
    # assign to lines the result of calling fp.readlines()
    lines = fp.readlines()
    # close the file using the close method of the file object held in fp
    fp.close()

    # for each line in the list lines
    for line in lines:
        # assign to line the result of calling line.strip() 
        line = line.strip()
        # assign to words the result of calling line.split(' ')
        words = line.split(' ')
        # if the first item in words is equal to 'base'
        if words[0] == 'base':
            # use the setBase function passing in the second item in words as the new base string
            setBase( lsys, words[1] )
        # else if the first item in words is equal to 'rule'
        elif words[0] == 'rule':
            # use the addRule function passing in all but the first item in words as the new rule
            addRule( lsys, words[1:])
  # return the L-system list lsys
    return lsys

def buildString( lsys, n ):
    """ Return a string generated by applying the L-system rules n times"""
    # assign to a local variable (e.g. nstring) the result of getBase(lsys) 
    nstring = getBase( lsys )
    # assign to a local variable (e.g. rule) the result of getRule(lsys, 0)
    rule = getRule( lsys, 0 )
    # assign to a local variable (e.g. symbol) the first element of rule
    symbol = rule[0]
    # assign to a local variable (e.g. replacement) the second element of rule
    replacement = rule[1]
    # loop n times
    for i in range(n):
        # assign to nstring, the result of nstring.replace( symbol, replacement )
        nstring = nstring.replace( symbol, replacement )
    # return nstring
    return nstring


def main(argv):
    # check if there are enough command-line arguments
    if len(argv) < 2:
        print("Usage : python3 lsystem.py <lsystem filename>")
        exit()

    # code to test reading from a file
    lsys_filename = argv[1]
    lsys = createLsystemFromFile( lsys_filename )
    print(lsys)
    
if __name__ == '__main__':
    main(sys.argv)
# def main():
#     my_lsys = init()
#     setBase( my_lsys, 'A' )
#     addRule( my_lsys, ['A','AB'] )
#     print(my_lsys)
#     print("the base is ", getBase( my_lsys ))
#     print("the first rule is ", getRule( my_lsys, 0 ))
				
# if __name__ == '__main__':
#     main()
